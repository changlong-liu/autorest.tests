package {{packageName}}

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"testing"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/to"
	"golang.org/x/net/http2"
)

const (
	mockHost = "https://localhost:8443"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           *azidentity.EnvironmentCredential
	err            error
	con            *armcore.Connection
)

{% for scenario in scenarios %}
func Test{{scenario.name}}(t *testing.T) {
{% for example in scenario.examples %}
    // From example {{example.name}}
	{%- if loop.first %}
	defer func() { recover() }()
	client := New{{example.operationGroup.language.go.name}}Client({{example.clientParametersOutput}})
	{%- endif %}
	{%- if example.returnInfo.length == 2 %}
	_, err {% if loop.first %}:{% endif %}= client.{{example.opName}}({{example.methodParametersOutput}})
	if err != nil {
		t.Error(err)
	}
	{%- else %}
	client.{{example.opName}}({{example.methodParametersOutput}})
	{%- endif %}
{% endfor %}
}
{% endfor %}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func setUp() {
	ctx = context.Background()
	subscriptionId = os.Getenv("SUBSCRIPTION_ID")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = armcore.NewConnection(mockHost, cred, &armcore.ConnectionOptions{
		Logging: azcore.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
